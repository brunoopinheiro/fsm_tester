from unittest.runner import TextTestRunner
from src.adapters import (
    BaseAdapter,
    TransitionsAdapter,
)
from src.entities import FSMProtocol
from src.components.graph_analyzer import GraphAnalyzer
from typing import Literal


DIALECTS = Literal['pytransitions', 'python-statemachine']


class FSMTester():

    def __initiate_adapter(
        self,
        fsm_module: FSMProtocol,
        dialect: DIALECTS,
    ) -> BaseAdapter:
        """With the given FSM module and dialect, return the appropriate
        adapter that will be used to interpret the FSM module.

        Args:
            fsm_module (FSMProtocol): The FSM Module implementation under test.
            dialect (DIALECTS): The dialect of the FSM module.

        Raises:
            NotImplementedError: For State Machine implementations not yet
                implemented.
            ValueError: For dialects not recognized.

        Returns:
            BaseAdapter: The adapter that will be used to interpret the FSM
        """
        if dialect == 'pytransitions':
            return TransitionsAdapter(fsm_module)
        elif dialect == 'python-statemachine':
            raise NotImplementedError(
                'Python State Machine not implemented yet.')
        else:
            raise ValueError('Dialect not recognized.')

    def __init__(
        self,
        fsm_module: FSMProtocol,
        final_state: str,
        dialect: DIALECTS = 'pytransitions',
        verbosity=2,
        *args,
        **kwargs,
    ) -> None:
        self.adapter = self.__initiate_adapter(fsm_module, dialect)
        self.final_state = final_state
        self.graph = self.adapter.get_graph()
        self.test_runner = TextTestRunner(
            verbosity=verbosity,
        )
        self.graph_analyzer = GraphAnalyzer(
            graph=self.graph,
            initial_state=self.adapter.initial_state,
            final_state=self.final_state,
        )
        self.suites = list()
        self.suites.append(self.graph_analyzer.unreachable_states_suite())
        self.suites.append(self.graph_analyzer.sink_states_suite())
        self.suites.append(
            self.graph_analyzer.nondeterministic_transition_suite(
                transitions=self.adapter.get_transitions(),
            )
        )
        self.exit = True

    @staticmethod
    def _report_errors(fail_msg_base: str, failure_results: list) -> str:
        summary_info = fail_msg_base
        for failure in failure_results:
            summary_info += str(failure)
        return summary_info

    def run_tests(self):
        """Run all the test suites generated by the FSMTester."""
        # TODO: Differentiate the result report for each suite.
        for suite in self.suites:
            suite_results = list()
            failures = list()
            for test in suite:
                self.test = test
                result = self.test_runner.run(test)
                is_successful = result.wasSuccessful()
                if not is_successful:
                    failures.append(test)
                suite_results.append(is_successful)
            errors_report = self._report_errors(suite.fail_msg, failures)
            assert all(suite_results), errors_report
